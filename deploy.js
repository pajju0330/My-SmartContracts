require('dotenv').config();
const ethers = require('ethers');
const fs = require('fs');

async function main(){
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URI);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY,provider);

    /* Actual way of doing this is to encrypt our private key and store it in json as done below (7:40:00) but we cant do that right now becoz we will be changing keys in our local newtwork, hashing it every time is hectic xD */ 
    
    // const encryptedJson = fs.readFileSync("./bin/.encryptedKey.json","utf8");
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(encryptedJson,process.env.PRIVATE_KEY_PASSWORD);
    // wallet = await wallet.connect(provider);



    const abi = fs.readFileSync('./bin/SimpleStorage.abi','utf8');
    const binary = fs.readFileSync('./bin/SimpleStorage.bin','utf8');
    const contractFactory = new ethers.ContractFactory(abi,binary,wallet);
    console.log("deploying....âœ…");
    const contract = await contractFactory.deploy();
    const deploymentReceipt = await contract.deployTransaction.wait(1);
    // console.log(deploymentReceipt); 
    const currentFavoriteNumber = await contract.retrieve();
    console.log(`favorite number: ${currentFavoriteNumber.toString()}`);
    const transactionResponse = await contract.store("4");
    const transactionReceipt = await transactionResponse.wait(1);
    console.log(contract.address);
    const updatedFavoriteNumber = await contract.retrieve();
    console.log(`Updated favorite number: ${updatedFavoriteNumber.toString()}`);
    

}



    /* Manual Deploy */
//     console.log("Lets create tx details..\n");
//     const nonce = await wallet.getTransactionCount();   
//     const tx = {
//         nonce,
//         gasPrice: 20000000000,
//         gasLimit: 1000000,
//         to:null,
//         value:0,
//         data:"0x608060405234801561001057600080fd5b5061057f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631ef455c71461005c5780632e64cec1146100715780636057361d146100885780638bab8dd51461009b5780639e7a13ad146100c6575b600080fd5b61006f61006a3660046102eb565b6100e7565b005b6000545b6040519081526020015b60405180910390f35b61006f610096366004610330565b600055565b6100756100a9366004610349565b805160208183018101805160028252928201919093012091525481565b6100d96100d4366004610330565b610190565b60405161007f9291906103aa565b6040805180820190915281815260208101838152600180548082018255600091909152825160029091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68101918255915190917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf70190610168908261046d565b5050508060028360405161017c919061052d565b908152604051908190036020019020555050565b600181815481106101a057600080fd5b600091825260209091206002909102018054600182018054919350906101c5906103e4565b80601f01602080910402602001604051908101604052809291908181526020018280546101f1906103e4565b801561023e5780601f106102135761010080835404028352916020019161023e565b820191906000526020600020905b81548152906001019060200180831161022157829003601f168201915b5050505050905082565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261026f57600080fd5b813567ffffffffffffffff8082111561028a5761028a610248565b604051601f8301601f19908116603f011681019082821181831017156102b2576102b2610248565b816040528381528660208588010111156102cb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156102fe57600080fd5b823567ffffffffffffffff81111561031557600080fd5b6103218582860161025e565b95602094909401359450505050565b60006020828403121561034257600080fd5b5035919050565b60006020828403121561035b57600080fd5b813567ffffffffffffffff81111561037257600080fd5b61037e8482850161025e565b949350505050565b60005b838110156103a1578181015183820152602001610389565b50506000910152565b82815260406020820152600082518060408401526103cf816060850160208701610386565b601f01601f1916919091016060019392505050565b600181811c908216806103f857607f821691505b60208210810361041857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561046857600081815260208120601f850160051c810160208610156104455750805b601f850160051c820191505b8181101561046457828155600101610451565b5050505b505050565b815167ffffffffffffffff81111561048757610487610248565b61049b8161049584546103e4565b8461041e565b602080601f8311600181146104d057600084156104b85750858301515b600019600386901b1c1916600185901b178555610464565b600085815260208120601f198616915b828110156104ff578886015182559484019460019091019084016104e0565b508582101561051d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161053f818460208701610386565b919091019291505056fea2646970667358221220da5715d64bf9a377f1a697957965797d3bcda93b9c279909a1e968c99dea7eba64736f6c63430008130033",
//         chainId:1337
//     };
//     // const signedtxResponse = await wallet.signTransaction(tx);
//     // console.log(signedtxResponse);
//     const sendtxResponse = await wallet.sendTransaction(tx);
//     await sendtxResponse.wait(1);
//     console.log(sendtxResponse);

// }




main().then(()=> process.exit(0))
    .catch((err)=>{
        console.log(err);
        process.exit(1);
    })